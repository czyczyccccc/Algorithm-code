//高精度/低精度

int a[1015];  //被除数
int ans[1015];  //商
int divisor;  //除数
int remain;  //余数

void string_int(char *p,int n)//正序输入（看竖式除法运算）
{
    int t=0;
    while(s[t]=='0')
    {
        t++;  //清除前导0
    }
    a[0]=n-t;
    for(int i=1,j=t;i<=n;i++,t++)
    {
        a[i]=p[t]-'0';
    }
}

void division()
{
    ans[0]=a[0];
    int temp=0;
    for(int i=1;i<=a[0];i++)
    {
        ans[i]=(temp*10+a[i])/divisor;
        temp=(temp*10+a[i])%divisor;
    }
    remain=temp;
}

void print()
{
    int t=1;
    while(ans[t]==0)
    {
        t++;
    }
    for(;t<=ans[0];t++)
    {
        cout<<ans[t];
    }
    cout<<endl;
    cout<<remain;//余数
}




//高精度/高精度 ，用减法模拟除法

int a[105];//被除数
int b[105];//除数
int ans[105];//商

void strign_int(char *p,int n,int *a)  //n=strlen(s)
{
    a[0]=n;
    for(int i=n,j=0;i>0;i--,j++)
    {
        a[i]=p[j]-'0';
    }
}

void copytemp(int *temp,int len)
{
    temp[0]=b[0]+len-1;
    for(int i=len-1,j=1;i<=temp[0];i++,j++)
    {
        temp[i]=b[j];
    }
}

int cmp(int *temp)
{
    if(a[0]>temp[0])
    {
        return 1;
    }
    else if (a[0]<temp[0])
    {
        return -1;
    }
    for(int i=temp[0];i>0;i--)
    {
        if(a[i]>temp[i])
        {
            return 1;
        }
        else if(a[i]<temp[i])
        {
            return -1;
        }
    }
    return 0;
}

void division(int *temp)
{
    int cmp_res=cmp(a,tmp);
    if(cmp_res==0)
    {
        a[0]=0;
        return;
    }
    else 
    {
        for(int i=1;i<=a[0];i++)
        {
            if(a[i]<temp[i])
            {
                a[i+1]--;
                a[i]+=10;
            }
            if(a[i]>=temp[i])
            {
                a[i]-=temp[i];
            }
        }
        while(a[a[0]]==0 &&a[0]>0)
        {
            a[0]--;
        }
    }
}
void func()
{
    ans[0]=a[0]-b[0]+1;
    int temp[105];//辅助数组，用于做减法
    for(int i=ans[0];i>0;i--)
    {
        memset(temp,0,sizeof(temp));//将temp数组赋值为0
        copytemp(temp,i);
        while(cmp(temp)>=0)
        {
            ans[i]++;
            division(temp);
        }
    }
    while(ans[ans[0]==0]&&ans[0]>0)
    {
        ans[0]--;
    }
}
